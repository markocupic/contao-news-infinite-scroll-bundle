<script src="https://unpkg.com/vue@next"></script>


<script>
    Array.prototype.map.call(document.querySelectorAll('.mod_newslist_infinite_scroll'), function(newslist) {

            /**
             * Generate the ContaoNewsInfiniteScroll object
             * requires news_infinite_scroll.js
             * @type {ContaoNewsInfiniteScroll}
             */
            var contaoNewsInfiniteScroll = new ContaoNewsInfiniteScroll(newslist, {
                // DOM element: Default to window
                scrollContainer: window,
                // DOM element: Pagination next  (<nav class="pagination block"><ul><li class="next"><a href="newslist.html?page_n343=2" class="next" title="Gehe zu Seite 2">Vorw√§rts</a></li></ul></nav>)
                paginationNextLink: newslist.querySelector('.pagination .next > a.next'),
                // DOM element: Pagination last  (<nav class="pagination block"><ul><li class="last"><a href="newslist.html?page_n343=44" class="last" title="Gehe zu Seite 44">Ende</a></li></ul></nav>)
                paginationLastLink: newslist.querySelector('.pagination .last > a.last'),
                // When set to true, this will disable infinite scrolling and start firing ajax requests on domready with an interval of 3s
                loadAllOnDomready: false,
                // Use a "load more button" (Preserve the accessibility of the footer)
                // !!!! Important Set showLoadMoreButton to false, if you want to autoload items
                showLoadMoreButton: true,
                // CSS selector: When you scroll and the window has reached the anchor point, requests will start
                anchorPoint: newslist,
                // Distance in px from the top of the anchorPoint
                bottomPixels: 100,
                // Integer: Fading time for appending news items
                fadeInTime: 400,

                // Callbacks
                /**
                 * @param instance
                 * @return bool
                 */
                onInitialize: function (instance) {
                    // Hide pagination
                    let pagination = newslist.querySelector('.pagination');
                    if(pagination)
                    {
                        pagination.style.visibility = 'hidden';
                    }

                    // Return false to abort initialization
                    return true;
                },

                /**
                 * @param instance
                 */
                onXHRStart: function (instance, url) {
                    // Do some actions
                    return 'https://google.ch'
                },

                /**
                 * @param json
                 * @param instance
                 * @param xhr
                 * @returns string
                 */
                onXHRComplete: function (response, instance, xhr) {
                    // Do some actions
                    return response;
                },

                /**
                 * @param instance
                 * @param xhr
                 */
                onXHRFail: function (instance, xhr) {
                    console.log(xhr);
                    console.error('No response from server with address: ' + instance.currentUrl);
                    console.error('Status code: ' + xhr.status);
                },

                /**
                 * @param instance
                 * @param xhr
                 */
                onBeforeAppendCallback: function (instance, xhr) {
                    // Do some actions
                    if (instance.response === '') {
                        //instance.response = '<div><h1>Hello world</h1></div>';
                    }
                },

                /**
                 * @param instance
                 * @param xhr
                 */
                onAppendCallback: function (instance, xhr) {
                    // Do some actions
                }
            });
        });

</script>
